using Microsoft.Xna.Framework;
using System;
using System.Collections.Generic;
using System.Linq;

namespace LuneWoL.PressureCheckFolder.Mode1
{
    public class Pool
    {
        public int SurfaceY { get; private set; }
        public int MinX { get; private set; }
        public int MaxX { get; private set; }
        public int MinY { get; private set; }
        public int MaxY { get; private set; }
        internal readonly Dictionary<int, (int leftX, int rightX)> _bounds = new Dictionary<int, (int, int)>();

        public void AddPoints(IEnumerable<Point> points)
        {
            _bounds.Clear();
            MinY = int.MaxValue; MaxY = int.MinValue; MinX = int.MaxValue; MaxX = int.MinValue;

            foreach (var group in points.GroupBy(pt => pt.Y))
            {
                int y = group.Key;
                int left = group.Min(pt => pt.X);
                int right = group.Max(pt => pt.X);
                _bounds[y] = (left, right);
                MinY = Math.Min(MinY, y);
                MaxY = Math.Max(MaxY, y);
                MinX = Math.Min(MinX, left);
                MaxX = Math.Max(MaxX, right);
            }

            SurfaceY = MinY;
            Main.NewText($"[Debug] Pool built: SurfaceY={SurfaceY}, rows({_bounds.Count})");
        }

        public bool IsIn(Microsoft.Xna.Framework.Vector2 worldPos)
        {
            int ty = (int)(worldPos.Y / 16f);
            if (ty < MinY || ty > MaxY) return false;
            if (!_bounds.TryGetValue(ty, out var b)) return false;
            int tx = (int)(worldPos.X / 16f);
            return tx >= b.leftX && tx <= b.rightX;
        }

        public void Merge(Pool other)
        {
            foreach (var kv in other._bounds)
            {
                if (_bounds.TryGetValue(kv.Key, out var b))
                {
                    int left = Math.Min(b.leftX, kv.Value.leftX);
                    int right = Math.Max(b.rightX, kv.Value.rightX);
                    _bounds[kv.Key] = (left, right);
                }
                else _bounds[kv.Key] = kv.Value;
            }

            MinY = Math.Min(MinY, other.MinY);
            MaxY = Math.Max(MaxY, other.MaxY);
            MinX = Math.Min(MinX, other.MinX);
            MaxX = Math.Max(MaxX, other.MaxX);
            SurfaceY = MinY;

            Main.NewText($"[Debug] Pools merged: new bounds rows({_bounds.Count})");
        }
    }
}
