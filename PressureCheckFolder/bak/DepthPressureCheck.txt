namespace LuneWoL.PressureCheckFolder.Mode1
{
    public class DepthPressureCheck : ModPlayer
    {
        public override bool IsLoadingEnabled(Mod mod)
            => LuneWoL.LWoLServerConfig.WaterRelated.DepthPressureMode == 2;

        private bool _wasDrowning;

        public override void PostUpdate()
        {
            bool drowning = Collision.DrownCollision(Player.position, Player.width, Player.height, Player.gravDir);

            if (drowning)
            {
                // Compute current depth by scanning up for the water surface at the player's X position
                int tileX = (int)(Player.Center.X / 16f);
                int tileY = (int)(Player.Center.Y / 16f);

                int surfaceY = FindWaterSurface(tileX, tileY);
                float depth = tileY - surfaceY;
                float breathLoss = depth / 1000f;

                Player.breath = Math.Max(0, Player.breath - (int)breathLoss);
                Main.NewText($"[Debug] Depth={depth:F1}, loss={breathLoss:F2}, breath={Player.breath}");
            }
            else if (_wasDrowning)
            {
                Main.NewText("[Debug] Exited pool");
            }

            _wasDrowning = drowning;
        }

        /// <summary>
        /// Scans upward from the player's tile position until the topmost continuous water tile, returning its Y coordinate.
        /// </summary>
        private int FindWaterSurface(int x, int startY)
        {
            int y = startY;
            // Move up while still in water
            while (y > 0)
            {
                var tile = Main.tile[x, y];
                if (tile == null || tile.LiquidAmount < 255 || tile.LiquidType != LiquidID.Water)
                {
                    // The first non-full-water tile marks the surface right below
                    return y + 1;
                }
                y--;
            }
            return 0; // reached world top
        }
    }
}